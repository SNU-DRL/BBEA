import numpy as np
from itertools import product
import random
import time

from xoa.commons.logger import *
from .proto import SamplerProtype


class CartesianGridSampler(SamplerProtype):
    def __init__(self, config, spec, verifier=None):
        self.name = 'Cartesian grid sampling'

        if 'verification' in spec and spec['verification'] == True and verifier != None:
            self.set_verification = True
        else:
            self.set_verification = False        

        super(CartesianGridSampler, self).__init__(config, spec, verifier)

    def generate(self):
        s_t = time.time()
        random.seed(self.seed)        
        
        param_names = self.config.get_param_names()
        n_dim = len(param_names)
        
        p_values = []
        for p in param_names:            
            n_p = len(self.config.get_range(p))
            p_v = []
            for i in range(n_p):
                v = float(i / (n_p - 1))
                p_v.append(v)
            p_values.append(p_v)
        
        cat_grid = [list(e) for e in product(*p_values)]
        
        random.shuffle(cat_grid) # shuffle grid order
        #debug("First item: {}".format(cat_grid[0]))
        #debug("Second item: {}".format(cat_grid[1]))

        self.num_samples = len(cat_grid)
        debug("Normalized value list for catesian product: {}".format(self.num_samples, p_values))
        info("# of candidates generated by catesian product: {} ({:.1f} sec)".format(self.num_samples, time.time() - s_t))
        
        if self.set_verification == True:
            #debug("Original grid: {}".format(cat_grid))            
            hpv_list = self.config.convert('grid', 'hpv_list', cat_grid)
            n_hpvs = len(hpv_list)
            v_grid = []
            for i in range(n_hpvs):
                hpv = hpv_list[i]
                g = cat_grid[i]
                hpv_dict = self.config.convert("arr", "dict", hpv)
                if self.verify(hpv_dict) == True:
                    #debug("valid cfg #{}: {}".format(i, g))
                    v_grid.append(g)
                if len(v_grid) >= self.num_samples:
                    break
            if len(v_grid) != self.num_samples:
                info("Size reduced after verification: {}/{}".format(len(v_grid), self.num_samples))
            
            v_grid = np.array(v_grid)            
            #debug("Verified grid: {}".format(v_grid))
            return v_grid
        else:
            return cat_grid
        